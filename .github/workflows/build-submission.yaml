name: Intake

on:
  push:
    branches: [ tpl-intake ]
    paths: [ tpl-*.toml ]

jobs:
  New-Submission:
    if: "startsWith(github.event.head_commit.message, 'Merge pull request')"
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: /usr/share/miniconda
        key: conda-dist-v1
        restore-keys: |
          conda-dist-
    - name: Setup conda
      uses: s-weigand/setup-conda@v1
      with:
        update-conda: false
        python-version: 3.7
        conda-channels: anaconda, conda-forge
    - name: Install dependencies
      run: |
        conda config --set always_yes True
        conda install git-annex datalad osfclient hub
        pip install git+https://github.com/templateflow/python-manager.git@master
    - name: Pacify DataLad about git config
      run: |
        git config --global user.name "NiPreps Bot"
        git config --global user.email "nipreps@gmail.com"
    - name: Extract the new template ID and OSF project
      run: |
        HEAD_BRANCH=$( git log -m -1 --name-only | grep "Merge pull" | sed 's+^ *Merge pull request #[0-9]* from .*/pr/++g' )
        if [[ "$HEAD_BRANCH" == "" ]]; then
          echo "ERROR: could not parse the head branch of merge commit."
          exit 1
        fi
        echo "Starting intake of ${HEAD_BRANCH}"
        TEMPLATE_ID=${HEAD_BRANCH#*/}
        OSF_PROJECT=${HEAD_BRANCH%/*}

        # OSF_PROJECT=$( grep "project =" ${HEAD_BRANCH#

        echo "TEMPLATE_ID=${TEMPLATE_ID}" >> ${GITHUB_ENV}
        echo "OSF_PROJECT=${OSF_PROJECT}" >> ${GITHUB_ENV}
    - name: Fetch data of new template and sanitize
      run: |
        tfmgr get $TEMPLATE_ID
        tfmgr sanitize $TEMPLATE_ID

    - name: Push to TemplateFlow's OSF & Create final submission as a PR
      env:
        GITHUB_USER: nipreps-bot
        NIPREPS_PAT: ${{ secrets.NIPREPS_BOT_PAT }}
        OSF_PASSWORD: ${{ secrets.OSF_PASSWORD }}
        OSF_USERNAME: ${{ secrets.OSF_USERNAME }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        git config --global github.user ${GITHUB_USER}
        git config --global github.token ${NIPREPS_PAT}
        git config --global hub.token ${NIPREPS_PAT}
        git config --global hub.oauthtoken ${NIPREPS_PAT}
        git config --global hub.protocol https

        ORIG_FOLDER="$PWD/${TEMPLATE_ID}"
        tfmgr push $TEMPLATE_ID --osf-project ue5gx
        tfmgr geturls $TEMPLATE_ID --osf-project ue5gx --out-csv /tmp/osf.csv
        TEMPLATE_DESC=$( tfmgr metadata ${TEMPLATE_ID} Name )

        # Install templateflow via datalad
        mkdir /tmp/datalad
        cd /tmp/datalad/
        # datalad install -r git@github.com:templateflow/templateflow.git
        datalad install -r https://github.com/templateflow/templateflow.git

        # Work on a new branch
        cd templateflow/
        git checkout -b add/${TEMPLATE_ID}

        # Initialize the datalad sub-dataset
        datalad create -c text2git -d . -D "${TEMPLATE_DESC}" ${TEMPLATE_ID}
        cd ${TEMPLATE_ID}/
        datalad create-sibling-github --github-organization templateflow -s github ${TEMPLATE_ID}
        git annex initremote public-s3 type=S3 encryption=none public=yes bucket=templateflow exporttree=yes versioning=yes fileprefix="${TEMPLATE_ID}/" autoenable=true
        datalad siblings configure -s github --publish-by-default github
        datalad save -m "chore: setup GitHub sibling and public-s3 annex-remote"

        # Add data to new sub-dataset
        datalad addurls /tmp/osf.csv '{link}' '{name}' --message "add(${TEMPLATE_ID}): imaging data by url (OSF)"
        pushd ${ORIG_FOLDER}
        for f in $( find . -type f ); do
          dest=/tmp/datalad/${TEMPLATE_ID}/${f}
          if [ ! -f "$dest" ]; then
            cp -n $f /tmp/datalad/${TEMPLATE_ID}/$dest
        done
        popd
        datalad save -m "add(${TEMPLATE_ID}): metadata to git (GitHub)"

        # Fixup submodule URL
        cd ..
        sed -i -e "s+url = ./$TEMPLATE_ID+url = https://github.com/templateflow/$TEMPLATE_ID+g" .gitmodules
        datalad save -m "fix(submodules): set the github repo url for new template ``$TEMPLATE_ID``"

        # Ready!
        datalad push -r --to github .

        # Send PR
        hub pull-request -b templateflow:master -h templateflow:add/${TEMPLATE_ID}
